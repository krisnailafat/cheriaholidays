import { Navigation } from "react-native-navigation";
import { Provider } from "react-redux";
import PushNotification from 'react-native-push-notification';
import PushNotificationIOS from 'react-native';

import AuthScreen from "./src/screens/Auth/Auth";
// import SharePlaceScreen from "./src/screens/SharePlace/SharePlace";
// import FindPlaceScreen from "./src/screens/FindPlace/FindPlace";
// import PlaceDetailScreen from "./src/screens/PlaceDetail/PlaceDetail";
import SideDrawer from "./src/screens/SideDrawer/SideDrawer";
import PaymentConfirm from "./src/screens/PaymentConfirm/PaymentConfirm";
import PaymentRecord from "./src/screens/PaymentRecord/PaymentRecord";
import RequestTour from "./src/screens/RequestTour/RequestTour";
import TourPackage from "./src/screens/TourPackage/TourPackage"
import CategoryTourPackage from "./src/screens/TourPackage/CategoryTourPackage"
import TourDetail from "./src/screens/TourDetail/TourDetail";
import TourOrder from "./src/screens/TourOrder/TourOrder";
import configureStore from "./src/store/configureStore";

const store = configureStore();

PushNotification.configure(
    {
        // (optional) Called when Token is generated (iOS and Android)
        onRegister: function(token) {
            console.log( 'TOKEN:', token );
        },

        // (required) Called when a remote or local notification is opened or received
        onNotification: function(notification) {
            console.log( 'NOTIFICATION:', notification );

            // process the notification
            riseNotification(notification)

            // required on iOS only (see fetchCompletionHandler docs: https://facebook.github.io/react-native/docs/pushnotificationios.html)
            //notification.finish(PushNotificationIOS.FetchResult.NoData);
        },

        // ANDROID ONLY: GCM or FCM Sender ID (product_number) (optional - not required for local notifications, but is need to receive remote push notifications)
        senderID: "642286517439",

        // IOS ONLY (optional): default: all - Permissions to register.
        permissions: {
            alert: true,
            badge: true,
            sound: true
        },

        // Should the initial notification be popped automatically
        // default: true
        popInitialNotification: true,

        /**
         * (optional) default: true
         * - Specified if permissions (ios) and token (android and ios) will requested or not,
         * - if not, you must call PushNotificationsHandler.requestPermissions() later
         */
        requestPermissions: true,
    }
);

function riseNotification(data) {
    console.log('data',data)
    if(data.notification != undefined){
        PushNotification.localNotification(
            {
                /* Android Only Properties */
                id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                ticker: "My Notification Ticker", // (optional)
                autoCancel: true, // (optional) default: true
                largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
                smallIcon: "ic_launcher", // (optional) default: "ic_notification" with fallback for "ic_launcher"
                bigText: "INi contoh big text", // (optional) default: "message" prop
                subText: "This is a subText", // (optional) default: none
                color: "red", // (optional) default: system default
                vibrate: true, // (optional) default: true
                vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                tag: 'some_tag', // (optional) add tag to message
                group: "group", // (optional) add group to message
                ongoing: false, // (optional) set whether this is an "ongoing" notification

                /* iOS only properties */
                //alertAction: // (optional) default: view
                //  category: // (optional) default: null
//userInfo: // (optional) default: null (object containing additional notification data)

                /* iOS and Android properties */
                title: data.notification.title, // (optional)
                message: data.notification.body, // (required)
                playSound: true, // (optional) default: true
                soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
                //number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
                repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
                //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
            });
        PushNotification.cancelLocalNotifications({id: '0'});
    }

}

// Register Screens
Navigation.registerComponent(
    "cheria-holidays.AuthScreen",
    () => AuthScreen,
    store,
    Provider
);
// Navigation.registerComponent(
//     "cheria-holidays.SharePlaceScreen",
//     () => SharePlaceScreen,
//     store,
//     Provider
// );
// Navigation.registerComponent(
//     "cheria-holidays.FindPlaceScreen",
//     () => FindPlaceScreen,
//     store,
//     Provider
// );
// Navigation.registerComponent(
//     "cheria-holidays.PlaceDetailScreen",
//     () => PlaceDetailScreen,
//     store,
//     Provider
// );
Navigation.registerComponent(
    "cheria-holidays.SideDrawer",
    () => SideDrawer,
    store,
    Provider
);
Navigation.registerComponent(
    "cheria-holidays.PaymentConfirm",
    () => PaymentConfirm,
    store,
    Provider
);
Navigation.registerComponent(
    "cheria-holidays.PaymentRecord",
    () => PaymentRecord,
    store,
    Provider
);
Navigation.registerComponent(
    "cheria-holidays.RequestTour",
    () => RequestTour,
    store,
    Provider
);
Navigation.registerComponent(
    "cheria-holidays.TourPackage",
    () => TourPackage,
    store,
    Provider
);
Navigation.registerComponent(
    "cheria-holidays.TourDetail",
    () => TourDetail,
    store,
    Provider
);
Navigation.registerComponent(
    "cheria-holidays.TourOrder",
    () => TourOrder,
    store,
    Provider
);
Navigation.registerComponent(
    "cheria-holidays.CategoryTourPackage",
    () => CategoryTourPackage,
    store,
    Provider
);

Navigation.startSingleScreenApp({
    screen: {
        screen: "cheria-holidays.AuthScreen",
        title: "Login"
    }
});


// import React from 'react';
// import { StyleSheet, Text, View } from 'react-native';

// export default class App extends React.Component {
//   render() {
//     return (
//       <View style={styles.container}>
//         <Text>Open up App.js to start working on your app!</Text>
//         <Text>Changes you make will automatically reload.</Text>
//         <Text>Shake your phone to open the developer menu.</Text>
//       </View>
//     );
//   }
// }

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     backgroundColor: '#fff',
//     alignItems: 'center',
//     justifyContent: 'center',
//   },
// });
